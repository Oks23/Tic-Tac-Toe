package proekt;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

@SuppressWarnings("serial")
public class TicTacToe extends JFrame {
public static final int ROWS = 3;  
public static final int COLS = 3;
public static final int CELL_SIZE = 100; // висота і ширина стовпців
public static final int CANVAS_WIDTH = CELL_SIZE * COLS; 
public static final int CANVAS_HEIGHT = CELL_SIZE * ROWS;
public static final int GRID_WIDTH = 8;                   
public static final int GRID_WIDHT_HALF = GRID_WIDTH / 2; 

// символи всередині 
public static final int CELL_PADDING = CELL_SIZE / 6;
public static final int SYMBOL_SIZE = CELL_SIZE - CELL_PADDING * 2; 
public static final int SYMBOL_STROKE_WIDTH = 8; 

// використовую для показу різних можливих ходів
public enum GameState { LAYING, DRAW, CROSS_WON, NOUGHT_WON }
private GameState currentState;  // поточний стан гри

// показує, що у нас в клітинці
public enum Seed { EMPTY, CROSS, NOUGHT }
private Seed currentPlayer;  // поточний гравець
private Seed[][] board   ; // борд гри
private DrawCanvas canvas; // canvas для борду гри
private JLabel statusBar;  // статуси

//конструктор
public TicTacToe() {
canvas = new DrawCanvas();  // конструктор для canvas
canvas.setPreferredSize(new Dimension(CANVAS_WIDTH, CANVAS_HEIGHT));

//  MouseEvent залежний від кліку миші
canvas.addMouseListener(new MouseAdapter() {
@Override
public void mouseClicked(MouseEvent e) {  // обробник кліку миші
int mouseX = e.getX();
int mouseY = e.getY();

// отримуємо стовпці та рядки, що були натиснутими
int rowSelected = mouseY / CELL_SIZE;
int colSelected = mouseX / CELL_SIZE;
if (currentState == GameState.PLAYING)
{
if (rowSelected >= 0 && rowSelected < ROWS && colSelected >= 0
&& colSelected < COLS && board[rowSelected][colSelected] == Seed.EMPTY) {     
board[rowSelected][colSelected] = currentPlayer; // робимо крок            
updateGame(currentPlayer, rowSelected, colSelected); // оновлюємо статус

// змінюємо гравця
currentPlayer = (currentPlayer == Seed.CROSS) ? Seed.NOUGHT : Seed.CROSS;}} 
else {
// завершення гри
initGame(); // починаємо гру спочатку}
repaint();  }});

// налаштування для статусного повідомлення
statusBar = new JLabel("  ");
statusBar.setFont(new Font(Font.DIALOG_INPUT, Font.BOLD, 15));  
statusBar.setBorder(BorderFactory.createEmptyBorder(2, 5, 4, 5));
Container cp = getContentPane();
cp.setLayout(new BorderLayout());
cp.add(canvas, BorderLayout.CENTER);
cp.add(statusBar, BorderLayout.PAGE_END); 
setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
pack();  
setTitle("Tic Tac Toe");
setVisible(true);  
board = new Seed[ROWS][COLS]; // виділяємо масив
initGame(); }

public void initGame() {
for (int row = 0; row < ROWS; ++row) {
for (int col = 0; col < COLS; ++col) {
board[row][col] = Seed.EMPTY; // всі клітинки пусті } }
currentState = GameState.PLAYING;     // готові грати
currentPlayer = Seed.CROSS; // хрестики ходять першими}

// оновлюємо поточний статус після ходу
public void updateGame(Seed theSeed, int rowSelected, int colSelected) {
if (hasWon(theSeed, rowSelected, colSelected)) {  // перевіряємо чи хтось ше не виграв
currentState = (theSeed == Seed.CROSS) ? GameState.CROSS_WON : GameState.NOUGHT_WON;
} else if (isDraw()) { 
currentState = GameState.DRAW;}

// або немає жодних змін поточного статусу (still GameState.PLAYING).}
// повертаємо true якщо хід зроблено
public boolean isDraw() {
for (int row = 0; row < ROWS; ++row) {
for (int col = 0; col < COLS; ++col) {
if (board[row][col] == Seed.EMPTY) {
return false; // є пуста клітинка
}
   }
      }
return true;  // нема пустої клітинки
   }
/** повертає true якщо гравець з ходом виграв(rowSelected, colSelected) */
public boolean hasWon(Seed theSeed, int rowSelected, int colSelected) {
return (board[rowSelected][0] == theSeed  // 3 в рядок
&& board[rowSelected][1] == theSeed
&& board[rowSelected][2] == theSeed

|| board[0][colSelected] == theSeed      // 3 в стовпець
&& board[1][colSelected] == theSeed
&& board[2][colSelected] == theSeed

|| rowSelected == colSelected            // 3 по діагоналі
&& board[0][0] == theSeed
&& board[1][1] == theSeed
&& board[2][2] == theSeed

|| rowSelected + colSelected == 2  // 3 по іншній діагоналі
&& board[0][2] == theSeed
&& board[1][1] == theSeed
&& board[2][0] == theSeed);}
class DrawCanvas extends JPanel {

@Override
public void paintComponent(Graphics g) {  //викликаємо якщо repaint()
super.paintComponent(g);    // заповнюємо задній фон
setBackground(Color.GRAY); // обираємо колір для заднього фоні

// малюємо поле
g.setColor(Color.LIGHT_GRAY);
for (int row = 1; row < ROWS; ++row) {
g.fillRoundRect(0, CELL_SIZE * row - GRID_WIDHT_HALF,CANVAS_WIDTH-1, GRID_WIDTH, GRID_WIDTH, GRID_WIDTH);
}
for (int col = 1; col < COLS; ++col) {
g.fillRoundRect(CELL_SIZE * col - GRID_WIDHT_HALF, 0, GRID_WIDTH, CANVAS_HEIGHT-1, GRID_WIDTH, GRID_WIDTH);
}

// використовуємо Graphics2D, що дозволяє встановити обведення пера
Graphics2D g2d = (Graphics2D)g;
g2d.setStroke(new BasicStroke( SYMBOL_STROKE_WIDTH, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));  // лише Graphics2D 
for (int row = 0; row < ROWS; ++row) {
for (int col = 0; col < COLS; ++col) {
int x1 = col * CELL_SIZE + CELL_PADDING;
int y1 = row * CELL_SIZE + CELL_PADDING;
if (board[row][col] == Seed.CROSS) {          
g2d.setColor(Color.GREEN);
int x2 = (col + 1) * CELL_SIZE - CELL_PADDING;
int y2 = (row + 1) * CELL_SIZE - CELL_PADDING;
g2d.drawLine(x1, y1, x2, y2);
g2d.drawLine(x2, y1, x1, y2);
} else if (board[row][col] == Seed.NOUGHT) {            
g2d.setColor(Color.BLUE);
g2d.drawOval(x1, y1, SYMBOL_SIZE, SYMBOL_SIZE);}}}

// виводимо повідомлення
if (currentState == GameState.PLAYING){          
statusBar.setForeground(Color.BLACK);
if (currentPlayer == Seed.CROSS) {
statusBar.setText("X's Turn");
} else {
statusBar.setText("O's Turn");}
} else if (currentState == GameState.DRAW) {          
statusBar.setForeground(Color.RED);
statusBar.setText("It's a Draw! Click to play again.");
} else if (currentState == GameState.CROSS_WON) {        
statusBar.setForeground(Color.RED);
statusBar.setText("'X' Won! Click to play again.");
} else if (currentState == GameState.NOUGHT_WON) {         
statusBar.setForeground(Color.RED);
statusBar.setText("'O' Won! Click to play again.");}}}
public static void main(String[] args){
SwingUtilities.invokeLater(new Runnable() {
@Override
public void run() {
new TicTacToe(); // робота конструктора
 }});}}
